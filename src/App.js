import React, { useState, useEffect } from 'react';
import { ErrorBoundary } from './ErrorBoundary';
import { fetchComparisonData } from './api';
import './App.css';

const App = () => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const loadData = async () => {
            try {
                const result = await fetchComparisonData();
                setData(result);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, []);

    return (
        <ErrorBoundary>
            <div className="app">
                <header>
                    <h1>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ React, Vue.js –∏ Angular</h1>
                </header>

                {loading && <div className="status-box loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>}
                {error && <div className="status-box error">–û—à–∏–±–∫–∞: {error}</div>}

                <nav className="navigation">
                    {['performance', 'usability', 'popularity', 'use-cases'].map((id) => (
                        <a key={id} href={`#${id}`} className="nav-link">
                            {{
                                'performance': '‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                'usability': 'üéØ –£–¥–æ–±—Å—Ç–≤–æ',
                                'popularity': 'üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
                                'use-cases': 'üíº –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'
                            }[id]}
                        </a>
                    ))}
                </nav>

                <main>
                    <Section
                        id="performance"
                        title="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
                        data={data?.performance}
                        render={(item) => (
                            <>
                                <DataRow label="–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:" value={item.updateTime} />
                                <DataRow label="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏:" value={item.memory} />
                            </>
                        )}
                    />

                    <Section
                        id="usability"
                        title="–£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
                        data={data?.usability}
                        render={(item) => (
                            <>
                                <DataRow label="–ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è:" value={item.learningCurve} />
                                <DataRow label="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:" value={item.projectSetup} />
                            </>
                        )}
                    />

                    <Section
                        id="popularity"
                        title="–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
                        data={data?.popularity}
                        render={(item) => (
                            <>
                                <DataRow
                                    label="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
                                    value={item.usage ? `${(item.usage * 100).toFixed(1)}%` : 'N/A'}
                                />
                                <DataRow
                                    label="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å:"
                                    value={item.satisfaction ? `${(item.satisfaction * 100).toFixed(1)}%` : 'N/A'}
                                />
                                <DataRow
                                    label="GitHub Stars:"
                                    value={item.githubStars?.toLocaleString()}
                                    icon="‚≠ê"
                                />
                                <DataRow
                                    label="–ö–æ–º–ø–∞–Ω–∏–∏:"
                                    value={item.companies?.join(', ')}
                                />
                            </>
                        )}
                    />

                    <Section
                        id="use-cases"
                        title="–û–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
                        data={data?.useCases}
                        render={(item) => <p className="use-case">{item.description}</p>}
                    />

                    <div className="hypothesis">
                        <h2>–ì–∏–ø–æ—Ç–µ–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>
                        <p>–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞ –Ω–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–≥–ª—è–¥–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –æ—Ç–ª–∏—á–∏—è, —á—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.</p>
                    </div>
                </main>
            </div>
        </ErrorBoundary>
    );
};

const Section = ({ id, title, data, render }) => {
    if (!data || Object.keys(data).length === 0) return null;

    return (
        <section id={id} className="section">
            <h2>{title}</h2>
            <div className="cards">
                {Object.entries(data).map(([framework, item]) => (
                    <div key={framework} className={`card ${framework}`}>
                        <h3>{framework.charAt(0).toUpperCase() + framework.slice(1)}</h3>
                        <div className="card-content">
                            {render(item)}
                        </div>
                    </div>
                ))}
            </div>
        </section>
    );
};

const DataRow = ({ label, value, icon }) => (
    <div className="data-row">
        <span className="label">{icon && <span className="icon">{icon}</span>}{label}</span>
        <span className="value">{value || 'N/A'}</span>
    </div>
);

export default App;